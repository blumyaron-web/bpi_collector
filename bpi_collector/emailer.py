import os
import smtplib
from datetime import datetime
from email.message import EmailMessage
from typing import List
from .logger import BusinessLogicLogger


class EmailSender:
    def __init__(self, smtp_server: str, smtp_port: int, username: str, password: str, logger: BusinessLogicLogger):
        self.smtp_server = smtp_server
        self.smtp_port = smtp_port
        self.username = username
        self.password = password
        self.logger = logger

    def send_report_email(self, from_addr: str, to_addrs: List[str], subject: str, samples: list, graph_path: str = None) -> bool:
        """Send an email with HTML report content and PDF attachment."""
        from .report_generator import ReportGenerator
        import tempfile
        
        try:
            # Generate HTML content for email body
            html_generator = ReportGenerator("")  # Empty path for HTML only
            html_content = html_generator.generate_html_report(samples)
            graph_path = None  # Initialize graph_path
            
            # Generate PDF report as attachment
            pdf_attachments = []
            if samples:  # Only generate PDF if we have data
                with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_pdf:
                    pdf_generator = ReportGenerator(temp_pdf.name)
                    pdf_path = pdf_generator.generate_report(samples, graph_path)
                    pdf_attachments = [pdf_path]
            
            # Prepare all attachments (PDF + graph)
            all_attachments = pdf_attachments.copy()
            if graph_path and os.path.exists(graph_path):
                all_attachments.append(graph_path)
            
            # Send email with HTML body and attachments
            result = self.send(from_addr, to_addrs, subject, html_content, all_attachments)
            
            # Clean up temporary PDF
            for pdf_file in pdf_attachments:
                try:
                    os.unlink(pdf_file)
                except:
                    pass
                    
            return result
            
        except Exception as e:
            error_msg = f"Failed to send report email: {str(e)}"
            print(error_msg)  # Print directly to ensure we see the error
            try:
                self.logger.error(error_msg)
            except:
                pass
            return False

    def send(self, from_addr: str, to_addrs: List[str], subject: str, body: str, attachments: List[str] = None) -> bool:
        msg = EmailMessage()
        msg['From'] = from_addr
        msg['To'] = ', '.join(to_addrs)
        msg['Subject'] = subject

        # Set a plain text fallback first
        plain_text = body.replace('<br>', '\n').replace('<div>', '').replace('</div>', '\n')
        plain_text = ' '.join(plain_text.split())  # normalize whitespace
        msg.set_content(plain_text)

        # Helper: attach PNG inline using CID and collect non-inline attachments
        inline_cid = None
        other_attachments = []

        # Read attachments into memory first; don't attach yet to allow building the HTML alternative first
        for path in attachments or []:
            if not os.path.exists(path):
                try:
                    self.logger.info("Attachment missing; skipping", path=path)
                except Exception:
                    pass
                continue
            try:
                with open(path, 'rb') as f:
                    data = f.read()
                if path.lower().endswith('.png') and inline_cid is None:
                    inline_cid = 'graphimage'
                    inline_image = (data, os.path.basename(path))
                elif path.lower().endswith('.pdf'):
                    other_attachments.append((data, os.path.basename(path), 'application/pdf'))
                else:
                    other_attachments.append((data, os.path.basename(path), 'application/octet-stream'))
            except Exception as e:
                try:
                    self.logger.error("Failed to read attachment", path=path, error=str(e))
                except Exception:
                    pass

        self.logger.info("Sending email", to=to_addrs, subject=subject)
        try:
            # Use body as HTML content directly (it should be generated by report generator)
            # Set the HTML version with proper content type
            msg.add_alternative(body, subtype='html')

            # attach inline image (if present) and other attachments
            if inline_cid and 'inline_image' in locals():
                data, name = inline_image
                msg.add_attachment(data, maintype='image', subtype='png', filename=name, cid=inline_cid)

            for data, name, mime_type in other_attachments:
                maintype, subtype = mime_type.split('/', 1)
                msg.add_attachment(data, maintype=maintype, subtype=subtype, filename=name)

            with smtplib.SMTP(self.smtp_server, self.smtp_port, timeout=30) as s:
                s.starttls()
                s.login(self.username, self.password)
                s.send_message(msg)
            try:
                self.logger.info("Email sent")
            except Exception:
                pass
            return True
        except Exception as e:
            try:
                self.logger.logger.exception("SMTP send failed")
            except Exception:
                try:
                    self.logger.error("SMTP send failed", error=str(e))
                except Exception:
                    print("SMTP send failed:", e)
            return False
